---
import HistoryBar from "@components/HistoryBar.astro";
import { formatMinuteCount } from "@lib/formatter";
import { type Enums, type Tables } from "@typing/database.types";
import { Icon } from "astro-icon/components";
import { getRelativeLocaleUrl } from "astro:i18n";
import clsx from "clsx";
import { formatInTimeZone } from "date-fns-tz";
import Button from "./Button.astro";
import fullLocale from "./commonLocales";

const locale = fullLocale.stationCard[Astro.currentLocale ?? "zh-TW"];

export interface Props {
  station: Tables<"current"> & { station_id: Tables<"stations"> };
  history: Tables<"history">[];
}

const stationColor: Record<Enums<"station_state">, string> = {
  NORMAL: "border-green-400",
  EMPTY: "border-red-400",
  FULL: "border-yellow-400",
};
const stationHoverColor: Record<Enums<"station_state">, string> = {
  NORMAL: "hover:bg-green-400",
  EMPTY: "hover:bg-red-400",
  FULL: "hover:bg-yellow-400",
};
const stationBackground: Record<Enums<"station_state">, string> = {
  NORMAL: "bg-green-400",
  EMPTY: "bg-red-400",
  FULL: "bg-yellow-400",
};
const stationText: Record<Enums<"station_state">, string> = {
  NORMAL: locale["status:normal"],
  EMPTY: locale["status:empty"],
  FULL: locale["status:full"],
};

const { station, history } = Astro.props;
const timezone =
  Astro.request.headers.get("cf-timezone") ?? "Asia/Taipei";
const stationName =
  Astro.currentLocale === "zh-TW"
    ? station.station_id.name
    : station.station_id.name_en;
const stationAddress =
  Astro.currentLocale === "zh-TW"
    ? station.station_id.address
    : station.station_id.address_en;
---

<div
  class={clsx(
    "cursor-pointer rounded-lg border-2 bg-gray-800 px-6 py-4",
    stationColor[station.status],
  )}
  x-data="{ open: false }"
  x-on:click="!$event.target.closest('a') && (open = !open)"
  transition:name={`${station.station_id.id}:container`}
>
  <div
    class="flex flex-col items-center justify-between gap-4 md:flex-row"
  >
    <div class="flex w-full place-items-center gap-4 md:w-auto">
      <p class="truncate text-xl font-bold">
        {stationName}
      </p>
      <p
        class={clsx(
          "text-gray-900 rounded-full text-xs px-2 py-1 text-nowrap ml-auto md:ml-0",
          stationBackground[station.status],
        )}
      >
        {stationText[station.status]}
      </p>
    </div>

    <div
      class="flex w-full grow place-items-center gap-4 md:max-w-md md:justify-end"
    >
      <p class="text-xs text-gray-400">
        {locale["details:pre"]}
        {station.bikes}
        {locale["details:connect"]}
        {station.slots}
        {locale["details:post"]}
      </p>
      <div
        class="h-1.5 grow rounded-full bg-gray-600 md:w-[50%] md:grow-0"
      >
        <div
          class={clsx(
            "h-1.5 rounded-full",
            stationBackground[station.status],
          )}
          style={{
            width: `${(station.bikes / (station.bikes + station.slots)) * 100}%`,
          }}
        >
        </div>
      </div>
      <Icon
        name="material-symbols:add-rounded"
        class="text-xl transition-transform duration-200 motion-reduce:transition-none"
        :class="{'rotate-[405deg]': open}"
      />
    </div>
  </div>

  <div x-show="open" x-collapse>
    <div class="pt-4">
      <div class="border-t border-gray-500 pb-4"></div>
      <div class="grid grid-cols-1 md:grid-cols-2">
        <div class="space-y-2">
          <p>
            <span class="font-bold">
              {stationName}
            </span>
            {locale["location:connect"]}
            <span class="font-bold">{stationAddress}</span>
          </p>
          <p>
            {locale["station:total:pre"]}
            <span class="font-bold">{station.station_id.total}</span>
            {locale["station:total:post"]}
          </p>
          <p>
            {locale["station:tracked"]}
            <span class="font-bold"
              >{
                formatMinuteCount(
                  station.success,
                  Astro.currentLocale,
                )
              }</span
            >
          </p>
        </div>

        <div class="my-4 flex gap-4 md:my-0 md:justify-end">
          <div class="space-y-1.5">
            <p class="text-4xl font-bold md:text-right md:text-5xl">
              {
                Math.round(
                  (station.unavailable / station.success) * 10000,
                ) / 100
              }%
            </p>
            <p class="text-sm text-gray-400">
              {locale["time:noBike"]}
            </p>
          </div>
          <div class="space-y-1.5">
            <p class="text-4xl font-bold md:text-right md:text-5xl">
              {Math.round((station.full / station.success) * 100)}%
            </p>
            <p class="text-sm text-gray-400">
              {locale["time:noSlot"]}
            </p>
          </div>
        </div>
      </div>

      <div class="divide-y divide-gray-500 rounded-sm md:my-2">
        {history.map((k) => <HistoryBar history={k} />)}
      </div>

      <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
        <div>
          <p class="text-sm text-gray-500">
            {locale["update:text"]}
            <span class="font-bold"
              >{
                formatInTimeZone(
                  new Date(station.update),
                  timezone,
                  "yyyy/MM/dd HH:mm:ss",
                )
              }</span
            >
          </p>
          <p class="text-sm text-gray-500">
            {locale["update:id"]}
            <span class="font-bold">{station.station_id.id}</span>
          </p>
          <p class="text-sm text-gray-500">
            {locale["update:notice"]}
          </p>
        </div>
        <div class="flex place-items-end">
          <Button
            link={getRelativeLocaleUrl(
              Astro.currentLocale ?? "zh-TW",
              `/stations/${station.station_id.id}`,
            )}
            className={clsx(
              "ml-auto h-fit w-full text-center hover:text-black md:w-fit",
              stationColor[station.status],
              stationHoverColor[station.status],
            )}
            paddingOverride="py-2 px-6"
          >
            <p class="text-sm">{locale["button:text"]}</p>
          </Button>
        </div>
      </div>
    </div>
  </div>
</div>
