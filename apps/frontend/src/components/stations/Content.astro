---
import HistoryBar from "@components/HistoryBar.astro";
import { type Tables } from "@typing/database.types";
import fullLocale from "./locales";

export interface Props {
  stationData: Tables<"current"> & { station_id: Tables<"stations"> };
  historicalData: Tables<"history">[] | null;
}

import { Icon } from "astro-icon/components";
import clsx from "clsx";
import { format } from "date-fns";
import { formatInTimeZone } from "date-fns-tz";

const locale = fullLocale[Astro.currentLocale ?? "zh-TW"];
const { stationData, historicalData } = Astro.props;

const heroStatus: {
  color: string;
  icon: string;
  text: string;
} = (() => {
  const { slots, bikes, status } = stationData;

  if (slots === 0) {
    return {
      color: "text-red-400",
      icon: "fa7-regular:angry",
      text: locale["dynamic:noSlots"],
    };
  }

  if (bikes === 0) {
    return {
      color: "text-red-400",
      icon: "fa7-regular:angry",
      text: locale["dynamic:noBikes"],
    };
  }

  if (status === "FULL") {
    return {
      color: "text-yellow-400",
      icon: "fa7-regular:sad-cry",
      text: locale["dynamic:almostFull"],
    };
  }

  if (status === "EMPTY") {
    return {
      color: "text-yellow-400",
      icon: "fa7-regular:sad-cry",
      text: locale["dynamic:almostEmpty"],
    };
  }

  return {
    color: "text-emerald-400",
    icon: "fa7-regular:face-smile",
    text: locale["dynamic:normal"],
  };
})();

const timezone =
  Astro.request.headers.get("cf-timezone") ?? "Asia/Taipei";
const stationName =
  Astro.currentLocale === "zh-TW"
    ? stationData.station_id.name
    : stationData.station_id.name_en;

const processedData = historicalData?.reduce<{
  [key: string]: Tables<"history">[];
}>((final, item) => {
  const date = formatInTimeZone(item.at, timezone, "yyyy/MM/dd");
  (final[date] ||= []).push(item);
  return final;
}, {});
---

<main class="py-16">
  <div class="text-center">
    <div class="mb-8">
      <Icon
        name={heroStatus.icon}
        class={clsx("mx-auto text-8xl md:text-9xl", heroStatus.color)}
        transition:name="emoji"
      />
    </div>

    <div class="mx-auto space-y-4">
      <p class="text-lg md:text-xl">
        {locale["location:pre"]}
        <span class="font-bold">{stationName}</span>
        {locale["location:post"]}
      </p>
      <h1
        class="text-3xl leading-tight font-bold md:text-4xl"
        set:html={heroStatus.text}
        transition:name="hero"
      />
    </div>
  </div>

  <div class="mt-10">
    <div class="mx-auto grid max-w-xl grid-cols-2 gap-6">
      <div
        class={clsx(
          "space-y-2 rounded-lg border-2 bg-gray-800 px-6 py-4",
          stationData.status === "EMPTY"
            ? "border-red-400"
            : "border-indigo-400",
        )}
        transition:name="block:left"
      >
        <p class="text-2xl font-bold">
          {stationData.bikes}
        </p>

        <p class="font-bold text-gray-400">
          {locale["summary:bikes"]}
        </p>
      </div>

      <div
        class={clsx(
          "space-y-2 rounded-lg border-2 bg-gray-800 px-6 py-4",
          stationData.status === "FULL"
            ? "border-red-400"
            : "border-indigo-400",
        )}
        transition:name="block:right"
      >
        <p class="text-2xl font-bold">
          {stationData.slots}
        </p>

        <p class="font-bold text-gray-400">
          {locale["summary:slots"]}
        </p>
      </div>
    </div>

    <p
      class="mt-8 text-center text-sm text-gray-400"
      transition:name="subtitle"
    >
      {locale["update:text"]}<span class="font-bold"
        >{
          formatInTimeZone(
            new Date(stationData.update),
            timezone,
            "yyyy/MM/dd HH:mm:ss",
          )
        }</span
      >
    </p>
  </div>
</main>

<hr class="mx-auto max-w-4xl border-gray-600" />

<section
  class="mx-auto my-8 max-w-4xl"
  transition:name={`${stationData.station_id.id}:container`}
>
  <h2
    class="border-gray-400 text-2xl font-bold md:text-center"
    transition:name="section-title"
  >
    {locale["oclock:title"]}
  </h2>

  {
    processedData && (
      <div class="mt-6 space-y-2 rounded-lg">
        {Object.entries(processedData).map(([key, value], index) => (
          <div
            class="cursor-pointer"
            x-data={`{ open: ${index === 0 ? "true" : "false"}}`}
            x-on:click="open = !open"
          >
            <div class="flex flex-col justify-between gap-1 rounded-lg border-2 border-gray-500 bg-gray-800 px-4 py-3 md:flex-row md:place-items-center">
              <p class="font-bold">{key}</p>
              <p class="text-sm text-gray-400">
                {value.reduce(
                  (total, item) =>
                    total + (item.available <= 5 ? 1 : 0),
                  0,
                )}
                {locale["card:empty"]}
              </p>
            </div>

            <div
              class="my-4 divide-y divide-gray-500 rounded-lg bg-gray-800 px-4 py-2"
              x-show="open"
              x-collapse
            >
              {value.map((k) => (
                <HistoryBar history={k} />
              ))}
            </div>
          </div>
        ))}
      </div>
    )
  }
</section>
