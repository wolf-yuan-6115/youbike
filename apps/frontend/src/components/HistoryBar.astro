---
import { type Tables } from "@typing/database.types";
import { Icon } from "astro-icon/components";
import clsx from "clsx";
import { formatInTimeZone } from "date-fns-tz";

export interface Props {
  history: Tables<"history">;
  timeOverride?: string;
}

const { history, timeOverride } = Astro.props;

const filledBlocks = Math.floor(
  (history.available / (history.available + history.empty)) * 30,
);

const bikeIcon: Record<string, string> = {
  yb2: "material-symbols:pedal-bike-outline-rounded",
  eyb: "material-symbols:bolt-rounded",
};

let backgroundColor = "";

if (history.available <= 5) {
  backgroundColor = "bg-red-400";
} else if (history.empty <= 3) {
  backgroundColor = "bg-yellow-400";
} else {
  backgroundColor = "bg-green-400";
}

console.log(history);

const timezone =
  Astro.request.headers.get("cf-timezone") ?? "Asia/Taipei";
---

<div class="flex flex-col justify-between py-2 sm:flex-row">
  <div class="space-y-1.5">
    <p class="sm:text-sm">
      {
        timeOverride
          ? timeOverride
          : formatInTimeZone(
              new Date(history.at),
              timezone,
              "yyyy/MM/dd HH:mm",
            )
      }
    </p>
    <div class="flex items-center gap-2 text-xs text-gray-400">
      {
        Object.entries(history.types)
          .sort(([a], [b]) =>
            a === "yb2" ? -1 : b === "yb2" ? 1 : 0,
          )
          .map(([type, count]) => (
            <div class="inline-flex items-center gap-1.5">
              <Icon name={bikeIcon[type]} />
              <p class="font-bold">{count}</p>
            </div>
          ))
      }
      <div class="inline-flex items-center gap-1">
        <Icon name="material-symbols:bike-dock-rounded" />
        <p class="font-bold">{history.empty}</p>
      </div>
    </div>
  </div>

  <div
    class="my-2 inline-flex place-items-center justify-between gap-1.5 sm:my-0 [&>*]:h-8 [&>*]:w-2 [&>*]:rounded-full"
  >
    {
      [...Array(25).keys()].map((k) => (
        <div
          class={clsx(
            filledBlocks === 0
              ? "bg-red-400/20"
              : k + 1 <= filledBlocks
                ? backgroundColor
                : "bg-gray-500",
          )}
        />
      ))
    }
  </div>
</div>
